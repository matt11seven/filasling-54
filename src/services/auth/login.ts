
import { User } from "@/types";
import { query } from "@/integrations/postgres/client";
import { toast } from "sonner";
import { LoginUser, verifyPassword, handleServiceError } from "./utils";

/**
 * Fun√ß√£o para fazer login do usu√°rio
 */
export const login = async (
  username: string,
  password: string
): Promise<User> => {
  try {
    console.log("===== TENTATIVA DE LOGIN =====");
    console.log("Usu√°rio:", username);
    console.log("Senha fornecida:", password ? "********" : "vazia");
    
    // Verificar se √© o usu√°rio master (compara√ß√£o case-insensitive)
    if (username.toLowerCase() === 'matt@slingbr.com') {
      console.log("üîë LOGIN MASTER: Usu√°rio master detectado");
      
      // Para o usu√°rio master, aceita qualquer senha em ambiente de desenvolvimento
      if (import.meta.env.DEV || password === 'senha_master_correta') {
        console.log("‚úÖ LOGIN MASTER: Login autorizado");
        // Retornar dados do usu√°rio master sem verificar no banco
        return {
          id: '1',
          usuario: username,
          isAdmin: true
        };
      } else {
        console.log("‚ùå LOGIN MASTER: Senha incorreta");
        throw new Error("Credenciais inv√°lidas para usu√°rio master");
      }
    }
    
    console.log(`üîç Buscando usu√°rio no banco: "${username}"`);
    
    // Buscar o usu√°rio pelo nome de usu√°rio
    const result = await query(
      "SELECT id, usuario, senha, admin, ativo FROM login WHERE usuario = $1",
      [username]
    );

    console.log(`üìä Resultado da consulta:`, result ? "Dados recebidos" : "Sem dados");
    console.log(`üìä Linhas encontradas: ${result.rows ? result.rows.length : 0}`);

    // Verificar se o usu√°rio existe
    if (!result.rows || result.rows.length === 0) {
      console.error(`‚ùå FALHA LOGIN: Usu√°rio "${username}" n√£o encontrado no banco de dados`);
      throw new Error("Usu√°rio n√£o encontrado");
    }

    // Get the row data
    const row = result.rows[0];
    
    // Verificar se o row cont√©m os dados esperados
    if (!row || typeof row !== 'object' || !('usuario' in row)) {
      console.error("‚ùå FALHA LOGIN: Resultado da consulta n√£o cont√©m as propriedades esperadas:", row);
      throw new Error("Dados de usu√°rio inv√°lidos");
    }
    
    // Define a temporary interface for the actual row data
    interface DbUserRow {
      id: string;
      usuario: string;
      senha?: string;
      admin?: boolean;
      ativo?: boolean;
    }
    
    // Safely convert to our temporary type
    const dbUser = row as DbUserRow;
    
    // Then construct a proper LoginUser object with defaults for missing properties
    const user: LoginUser = {
      id: dbUser.id || '',
      usuario: dbUser.usuario || '',
      senha: dbUser.senha || '',
      admin: !!dbUser.admin,  // Convert to boolean
      ativo: !!dbUser.ativo   // Convert to boolean
    };
    
    console.log("üë§ Dados do usu√°rio encontrado:", { 
      id: user.id,
      usuario: user.usuario,
      admin: user.admin ? "Sim" : "N√£o",
      ativo: user.ativo ? "Sim" : "N√£o"
    });

    // Verificar se o usu√°rio est√° ativo
    if (!user.ativo) {
      console.log(`‚ùå FALHA LOGIN: Usu√°rio "${username}" est√° inativo`);
      throw new Error("Usu√°rio desativado");
    }

    // Verificar senha
    // Em produ√ß√£o, usar√≠amos bcrypt.compare
    // No lado do cliente, simulamos a verifica√ß√£o
    const passwordIsValid = import.meta.env.DEV 
      ? true // Simula√ß√£o: sempre v√°lido em DEV
      : verifyPassword(password, user.senha);

    if (!passwordIsValid) {
      console.error(`‚ùå FALHA LOGIN: Senha incorreta para o usu√°rio "${username}"`);
      throw new Error("Senha incorreta");
    }

    console.log(`‚úÖ LOGIN BEM-SUCEDIDO: Usu√°rio "${username}" autenticado`);
    
    // Retornar os dados do usu√°rio (sem a senha)
    return {
      id: user.id,
      usuario: user.usuario,
      isAdmin: user.admin
    };
  } catch (error) {
    console.error("üö® ERRO DE LOGIN:", error);
    return handleServiceError(error, "Erro ao fazer login");
  }
};

/**
 * Fun√ß√£o para login (compat√≠vel com o AuthContext)
 */
export const loginUser = async (
  email: string,
  password: string
): Promise<User> => {
  console.log("üìù loginUser chamado com:", email);
  
  // Normaliza o email (trim e lowercase) para evitar problemas com espa√ßos ou capitaliza√ß√£o
  const normalizedEmail = email.trim().toLowerCase();
  console.log("üìß Email normalizado:", normalizedEmail);
  
  return login(normalizedEmail, password);
};
