
import { query } from "@/integrations/postgres/client";

/**
 * Verifica se um usu√°rio est√° ativo
 */
export const checkUserActive = async (email: string): Promise<{ isActive: boolean, exists: boolean }> => {
  try {
    console.log(`üìä [UserStatus] Verificando status do usu√°rio: "${email}" - ${new Date().toISOString()}`);
    
    // Verifica√ß√£o especial para o usu√°rio master
    if (email.toLowerCase() === 'matt@slingbr.com') {
      console.log("‚úÖ [UserStatus] Usu√°rio master detectado na verifica√ß√£o de status");
      return { isActive: true, exists: true };
    }
    
    // Verifica√ß√£o especial para o usu√°rio de teste
    if (email.toLowerCase() === 'test@slingbr.com') {
      console.log("‚úÖ [UserStatus] Usu√°rio de teste detectado na verifica√ß√£o de status");
      return { isActive: true, exists: true };
    }
    
    // Obter o token JWT do localStorage
    const token = localStorage.getItem("accessToken");
    if (!token) {
      console.error("üö® [UserStatus] Token de autentica√ß√£o n√£o encontrado no localStorage");
      return { isActive: false, exists: false };
    }
    
    // Buscar o status do usu√°rio diretamente via API
    console.log(`üîç [UserStatus] Verificando status via API para "${email}"`);
    try {
      const response = await fetch('/api/auth/login', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`üö® [UserStatus] API respondeu com status ${response.status}: ${errorText}`);
        
        // Se o erro for 401 (n√£o autenticado), o usu√°rio pode existir mas o token expirou
        if (response.status === 401) {
          console.log(`‚ö†Ô∏è [UserStatus] Token expirado ou inv√°lido para "${email}"`);
          return { isActive: false, exists: true };
        }
        
        return { isActive: false, exists: false };
      }
      
      const userData = await response.json();
      console.log(`üìä [UserStatus] Status via API: `, userData);
      
      return { 
        isActive: userData.ativo !== false, // Consideramos ativo se n√£o for explicitamente false
        exists: true
      };
      
    } catch (apiError) {
      console.error("üö® [UserStatus] Erro ao verificar status via API:", apiError);
      
      // Tratamento especial - considerando usu√°rios conhecidos como ativos
      // No ambiente de produ√ß√£o, assumimos que usu√°rios conhecidos est√£o ativos
      // independentemente do resultado da API
      if (email.toLowerCase() === 'test@slingbr.com' || 
          email.toLowerCase() === 'admin@slingbr.com') {
        console.log(`‚úÖ [UserStatus] Tratamento especial para usu√°rio conhecido: "${email}"`);
        return { isActive: true, exists: true };
      }
      
      return { isActive: false, exists: false };
    }
  } catch (error) {
    console.error("üö® [UserStatus] Erro ao verificar status do usu√°rio:", error);
    return { isActive: false, exists: false };
  }
};
